{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _regenerator = require('babel-runtime/regenerator');\n\nvar _regenerator2 = _interopRequireDefault(_regenerator);\n\nvar _asyncToGenerator2 = require('babel-runtime/helpers/asyncToGenerator');\n\nvar _asyncToGenerator3 = _interopRequireDefault(_asyncToGenerator2);\n\nvar _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');\n\nvar _classCallCheck3 = _interopRequireDefault(_classCallCheck2);\n\nvar _createClass2 = require('babel-runtime/helpers/createClass');\n\nvar _createClass3 = _interopRequireDefault(_createClass2);\n\nvar _possibleConstructorReturn2 = require('babel-runtime/helpers/possibleConstructorReturn');\n\nvar _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);\n\nvar _inherits2 = require('babel-runtime/helpers/inherits');\n\nvar _inherits3 = _interopRequireDefault(_inherits2);\n\nvar _runtime = require('regenerator-runtime/runtime');\n\nvar _runtime2 = _interopRequireDefault(_runtime);\n\nvar _react = require('react');\n\nvar _react2 = _interopRequireDefault(_react);\n\nvar _api = require('@aws-amplify/api');\n\nvar _api2 = _interopRequireDefault(_api);\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nvar Connect = function (_Component) {\n  (0, _inherits3.default)(Connect, _Component);\n\n  function Connect(props) {\n    (0, _classCallCheck3.default)(this, Connect);\n\n    var _this = (0, _possibleConstructorReturn3.default)(this, (Connect.__proto__ || Object.getPrototypeOf(Connect)).call(this, props));\n\n    _this.state = _this.getDefaultState();\n    _this.subSubscription = null;\n    return _this;\n  }\n\n  (0, _createClass3.default)(Connect, [{\n    key: 'getDefaultState',\n    value: function getDefaultState() {\n      return {\n        loading: false,\n        data: {},\n        errors: [],\n        mutation: function mutation() {\n          return console.warn('Not implemented');\n        }\n      };\n    }\n  }, {\n    key: '_fetchData',\n    value: function () {\n      var _ref = (0, _asyncToGenerator3.default)(\n      /*#__PURE__*/\n      _regenerator2.default.mark(function _callee2() {\n        var _this2 = this;\n\n        var _props, _props$query, query, _props$query$variable, variables, _props$mutation, mutation, _props$mutation$mutat, mutationVariables, subscription, _props$onSubscription, onSubscriptionMsg, _getDefaultState, data, mutationProp, errors, hasValidQuery, hasValidMutation, hasValidSubscription, response, subsQuery, subsVars, observable;\n\n        return _regenerator2.default.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                this._unsubscribe();\n\n                this.setState({\n                  loading: true\n                });\n                _props = this.props, _props$query = _props.query;\n                _props$query = _props$query === undefined ? {} : _props$query;\n                query = _props$query.query, _props$query$variable = _props$query.variables, variables = _props$query$variable === undefined ? {} : _props$query$variable, _props$mutation = _props.mutation;\n                _props$mutation = _props$mutation === undefined ? {} : _props$mutation;\n                mutation = _props$mutation.query, _props$mutation$mutat = _props$mutation.mutationVariables, mutationVariables = _props$mutation$mutat === undefined ? {} : _props$mutation$mutat, subscription = _props.subscription, _props$onSubscription = _props.onSubscriptionMsg, onSubscriptionMsg = _props$onSubscription === undefined ? function (prevData) {\n                  return prevData;\n                } : _props$onSubscription;\n                _getDefaultState = this.getDefaultState(), data = _getDefaultState.data, mutationProp = _getDefaultState.mutation, errors = _getDefaultState.errors;\n\n                if (!(!_api2.default || typeof _api2.default.graphql !== 'function' || typeof _api2.default.getGraphqlOperationType !== 'function')) {\n                  _context2.next = 10;\n                  break;\n                }\n\n                throw new Error('No API module found, please ensure @aws-amplify/api is imported');\n\n              case 10:\n                hasValidQuery = query && _api2.default.getGraphqlOperationType(query) === 'query';\n                hasValidMutation = mutation && _api2.default.getGraphqlOperationType(mutation) === 'mutation';\n                hasValidSubscription = subscription && _api2.default.getGraphqlOperationType(subscription.query) === 'subscription';\n\n                if (!hasValidQuery && !hasValidMutation && !hasValidSubscription) {\n                  console.warn('No query, mutation or subscription was specified');\n                }\n\n                if (!hasValidQuery) {\n                  _context2.next = 27;\n                  break;\n                }\n\n                _context2.prev = 15;\n                data = null;\n                _context2.next = 19;\n                return _api2.default.graphql({\n                  query: query,\n                  variables: variables\n                });\n\n              case 19:\n                response = _context2.sent;\n                data = response.data;\n                _context2.next = 27;\n                break;\n\n              case 23:\n                _context2.prev = 23;\n                _context2.t0 = _context2['catch'](15);\n                data = _context2.t0.data;\n                errors = _context2.t0.errors;\n\n              case 27:\n                if (hasValidMutation) {\n                  mutationProp = function () {\n                    var _ref2 = (0, _asyncToGenerator3.default)(\n                    /*#__PURE__*/\n                    _regenerator2.default.mark(function _callee(variables) {\n                      var result;\n                      return _regenerator2.default.wrap(function _callee$(_context) {\n                        while (1) {\n                          switch (_context.prev = _context.next) {\n                            case 0:\n                              _context.next = 2;\n                              return _api2.default.graphql({\n                                query: mutation,\n                                variables: variables\n                              });\n\n                            case 2:\n                              result = _context.sent;\n\n                              _this2.forceUpdate();\n\n                              return _context.abrupt('return', result);\n\n                            case 5:\n                            case 'end':\n                              return _context.stop();\n                          }\n                        }\n                      }, _callee, _this2);\n                    }));\n\n                    return function mutationProp(_x) {\n                      return _ref2.apply(this, arguments);\n                    };\n                  }();\n                }\n\n                if (hasValidSubscription) {\n                  subsQuery = subscription.query, subsVars = subscription.variables;\n\n                  try {\n                    observable = _api2.default.graphql({\n                      query: subsQuery,\n                      variables: subsVars\n                    });\n                    this.subSubscription = observable.subscribe({\n                      next: function next(_ref3) {\n                        var data = _ref3.value.data;\n                        var prevData = _this2.state.data;\n                        var newData = onSubscriptionMsg(prevData, data);\n\n                        _this2.setState({\n                          data: newData\n                        });\n                      },\n                      error: function error(err) {\n                        return console.error(err);\n                      }\n                    });\n                  } catch (err) {\n                    errors = err.errors;\n                  }\n                }\n\n                this.setState({\n                  data: data,\n                  errors: errors,\n                  mutation: mutationProp,\n                  loading: false\n                });\n\n              case 30:\n              case 'end':\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this, [[15, 23]]);\n      }));\n\n      function _fetchData() {\n        return _ref.apply(this, arguments);\n      }\n\n      return _fetchData;\n    }()\n  }, {\n    key: '_unsubscribe',\n    value: function _unsubscribe() {\n      if (this.subSubscription) {\n        this.subSubscription.unsubscribe();\n      }\n\n      ;\n    }\n  }, {\n    key: 'componentDidMount',\n    value: function () {\n      var _ref4 = (0, _asyncToGenerator3.default)(\n      /*#__PURE__*/\n      _regenerator2.default.mark(function _callee3() {\n        return _regenerator2.default.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                this._fetchData();\n\n              case 1:\n              case 'end':\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this);\n      }));\n\n      function componentDidMount() {\n        return _ref4.apply(this, arguments);\n      }\n\n      return componentDidMount;\n    }()\n  }, {\n    key: 'componentWillUnmount',\n    value: function componentWillUnmount() {\n      this._unsubscribe();\n    }\n  }, {\n    key: 'componentDidUpdate',\n    value: function componentDidUpdate(prevProps) {\n      var loading = this.state.loading;\n      var _props2 = this.props,\n          newQueryObj = _props2.query,\n          newMutationObj = _props2.mutation;\n      var prevQueryObj = prevProps.query,\n          prevMutationObj = prevProps.mutation; // query\n\n      var _ref5 = newQueryObj || {},\n          newQuery = _ref5.query,\n          newQueryVariables = _ref5.variables;\n\n      var _ref6 = prevQueryObj || {},\n          prevQuery = _ref6.query,\n          prevQueryVariables = _ref6.variables;\n\n      var queryChanged = prevQuery !== newQuery || JSON.stringify(prevQueryVariables) !== JSON.stringify(newQueryVariables); // mutation\n\n      var _ref7 = newMutationObj || {},\n          newMutation = _ref7.query,\n          newMutationVariables = _ref7.variables;\n\n      var _ref8 = prevMutationObj || {},\n          prevMutation = _ref8.query,\n          prevMutationVariables = _ref8.variables;\n\n      var mutationChanged = prevMutation !== newMutation || JSON.stringify(prevMutationVariables) !== JSON.stringify(newMutationVariables);\n\n      if (!loading && (queryChanged || mutationChanged)) {\n        this._fetchData();\n      }\n    }\n  }, {\n    key: 'render',\n    value: function render() {\n      var _state = this.state,\n          data = _state.data,\n          loading = _state.loading,\n          mutation = _state.mutation,\n          errors = _state.errors;\n      return this.props.children({\n        data: data,\n        errors: errors,\n        loading: loading,\n        mutation: mutation\n      }) || null;\n    }\n  }]);\n  return Connect;\n}(_react.Component);\n\nexports.default = Connect;","map":null,"metadata":{},"sourceType":"script"}